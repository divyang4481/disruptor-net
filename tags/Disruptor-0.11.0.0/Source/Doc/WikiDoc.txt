Disruptor-net is a port of the [http://code.google.com/p/disruptor/ Disruptor] project to the .NET Framework.

=What is the disruptor?=
Disruptor is a data construct used to pass messages between threads in an ordered maner (FIFO).
It is composed by:
* a ring buffer (array)
* a set of barriers used to synchronise concurrent acces to the ring buffer. A producer barrier is used by one or more producer(s) to publish messages to the ring buffer and a consumer barrier notifies consumers when new data is available

=Is it performant?=
The disruptor benefits of the following optimisations:
* no allocation during execution(message instances are pre-allocated when the ring buffer is initialised and recycled during executio )
* CPU cache friendly: no false sharing, no contended writes and messages appears in sequencial order in memory, which improves pre-fetching
* performance tets, included in source code, show significant improvements compared to dtata structures available in .NET framework

Progress (3rd July 2011)
* removed IEntry and replaced it with struct Entry<T>: data processed by the disruptor no longer need to implement a specific interface
* split the implementation in 2: RingBuffer<T> for reference type and ValueTypeRingBuffer<T> for value types.

Progress (28th June 2011)
 * automated build process
 * imported several .net performance test tools ([http://www.microsoft.com/download/en/details.aspx?id=16273 ClrProfiler], [http://bcl.codeplex.com/wikipage?title=PerfMonitor&referringTitle=Home Perf Monitor]) and found one source of allocation. This is now fixed, the disruptor does not create any garbage once started.
 * first perf test ported (1 producer, 1 consumer): first results show about 9-10 million msg/sec on my dual core i7 @ 2.67GHz
 * perf test does not stop properly all the time, to investigate...

Progress (27th June 2011)
 * code base: all classes have been ported except Histogram.java
 * unit tests: all unit tests have been ported but 2 are failing and need to be fixed.
 * perf tests: TODO
